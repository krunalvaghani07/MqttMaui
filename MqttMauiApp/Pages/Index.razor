@page "/"
@using MqttMauiApp.Model
@inject NavigationManager NavManager
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Microsoft.AspNetCore.Hosting;
@using Newtonsoft.Json;
@inject IJSRuntime JSRuntime
@inject MqttMauiApp.Interfaces.IFolderPicker FolderPicker

<br />
<div>
    <button class="btn btn-primary text-dark" @onclick="CreateClient"><span class="fa fa-plus"></span> Create Client</button>
    <button class="btn btn-success text-dark" @onclick="OpenFilePicker"><span class="fa fa-sign-in"></span> Import Client</button>
    @*<InputFile accept="application/JSON" OnChange="HandleFileSelected" id="importConfig" hidden/>*@

    <button class="btn btn-secondary text-dark" @onclick="ExportJson"><span class="fa fa-print"></span> Export Client</button>
    <h4 style="margin-top:10px;">Configuration File : @ConfigFilePath</h4>
</div>
<div class="row">
    @foreach (var client in mqttClientConnector)
    {
        <div class="col-lg-3 col-md-4 col-sm-6">
            <div class="card" style="margin-top:10px;">
                @if (client.IsConnected)
                {
                    <div class="card-header" style="background-color:green">
                        <h5 class="card-title">
                            @client.MqttClientModel.ClientName
                            <button title="Delete" class="btn btn-link text-dark" style="float:right;" @onclick="() => Delete(client.MqttClientModel)"><span class="fa fa-trash-o fa-lg"></span></button>
                            <button title="Disconnect" class="btn btn-link text-dark" style="float:right;" @onclick="() =>  Disconnect(client)"><span class="fa fa-power-off fa-lg"></span></button>
                        </h5>
                    </div>
                }
                else
                {
                    <div class="card-header" style="background-color:red">
                        <h5 class="card-title">
                            @client.MqttClientModel.ClientName
                            <button title="Delete" class="btn btn-link text-dark" style="float:right;" @onclick="() => Delete(client.MqttClientModel)"><span class="fa fa-trash-o fa-lg"></span></button>
                            <button title="Connect" class="btn btn-link text-dark" style="float:right;" @onclick="() => Connect(client)"><span class="fa fa-refresh fa-lg"></span></button>
                        </h5>
                    </div>
                }
                <div class="card-body" @onclick="() => ClientSelect(client)">
                    <p class="card-text">@client.MqttClientModel.Host</p>
                    <div>User : @client.MqttClientModel.UserName</div>
                </div>
            </div>
        </div>
    }
</div>
<br />


@code {

    List<MqttModelConnection> mqttClientConnector = new List<MqttModelConnection>();
    string ConfigFilePath;

    protected override async Task OnInitializedAsync()
    {
        LoadClients();
        ConnectToMqtt();
        StateHasChanged();
    }

    private void ConnectToMqtt(){
        mqttClientConnector.Clear();
        if (MqttClientModel.mqttClients.Count > 0)
        {
            foreach (var clientmodel in MqttClientModel.mqttClients)
            {
                var mqttconnector = new MqttConnector(clientmodel);
                var client = mqttconnector.Connect(clientmodel);
                mqttClientConnector.Add(new MqttModelConnection() { MqttConnector = mqttconnector, Client = client, MqttClientModel = clientmodel, IsConnected = false });
                client.ConnectedAsync += async e =>
                {
                    mqttClientConnector.Where(m => m.MqttClientModel == clientmodel).ToList().ForEach(ch => { ch.IsConnected = true; ch.LastConnected = DateTime.Now; });
                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                };
                client.DisconnectedAsync += async e =>
               {
                   mqttClientConnector.Where(m => m.MqttClientModel == clientmodel).ToList().ForEach(ch => { ch.IsConnected = false; });
                   await InvokeAsync(() =>
                   {
                       StateHasChanged();
                   });
               };
                mqttconnector.StartConnecting();
            }
        }
    }

    private async void OpenFilePicker() {
        var jsonFileType = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>{
                { DevicePlatform.iOS, new[] { ".JSON" } },
                { DevicePlatform.Android, new[] { "application/JSON" } },
                { DevicePlatform.WinUI, new[] { ".json" } },
                { DevicePlatform.Tizen, new[] { ".JSON" } },
                { DevicePlatform.macOS, new[] { "json" } },
        });
        var result = await FilePicker.PickAsync(new PickOptions
        {
            FileTypes = jsonFileType,
            PickerTitle = "Select Config(json)File"
        });
        if(result == null){
            return;
        }
        else{
            var stream = await result.OpenReadAsync();
            MqttClientModel.mqttClients = await System.Text.Json.JsonSerializer.DeserializeAsync<List<MqttClientModel>>(stream);
            ConfigFilePath = result.FullPath;
            MqttClientModel.ConfigPath = ConfigFilePath;
            ConnectToMqtt();
            string mainDir = AppDomain.CurrentDomain.BaseDirectory;
            string configpathsave = $@"{mainDir}\wwwroot\clientconfig.txt";
            if (File.Exists(configpathsave))
            {
                File.Delete(configpathsave);
            }
            File.WriteAllText(configpathsave, MqttClientModel.ConfigPath);
            StateHasChanged();
        }
    }

    private void LoadClients()
    {
        string mainDir = AppDomain.CurrentDomain.BaseDirectory;
        if (File.Exists($@"{mainDir}\wwwroot\clientconfig.txt")){
            var path = File.ReadAllText($@"{mainDir}\wwwroot\clientconfig.txt");
            if (File.Exists(path))
            {
                ConfigFilePath = path;
                var data = File.ReadAllText(ConfigFilePath);
                MqttClientModel.mqttClients = JsonConvert.DeserializeObject<List<MqttClientModel>>(data);
            }
            else{
                ConfigFilePath = $@"{mainDir}\wwwroot\client.json";
                var data = File.ReadAllText(ConfigFilePath);
                MqttClientModel.mqttClients = JsonConvert.DeserializeObject<List<MqttClientModel>>(data);
            }
        }else{
            ConfigFilePath = $@"{mainDir}\wwwroot\client.json";
            if (File.Exists($@"{mainDir}\wwwroot\client.json"))
            {
                var data = File.ReadAllText($@"{mainDir}\wwwroot\client.json");
                MqttClientModel.mqttClients = JsonConvert.DeserializeObject<List<MqttClientModel>>(data);
                //mqttClientModels = MqttClientModel.mqttClients;
            }
        }
        MqttClientModel.ConfigPath = ConfigFilePath;
    }

    private void Disconnect(MqttModelConnection mqttModelConnection)
    {
        mqttModelConnection.MqttConnector.Disconnect();
        StateHasChanged();
    }

    private void Connect(MqttModelConnection mqttModelConnection)
    {
        mqttModelConnection.MqttConnector.StartConnecting();
        StateHasChanged();
    }

    private void ClientSelect(MqttModelConnection client)
    {
        NavManager.NavigateTo($"/PubSubTopic/{client.MqttClientModel.ClientId}");
    }

    private void Delete(MqttClientModel client)
    {
        MqttClientModel.mqttClients.Remove(client);
        string json = JsonConvert.SerializeObject(MqttClientModel.mqttClients);
        if (File.Exists(ConfigFilePath))
        {
            File.Delete(ConfigFilePath);
        }
        File.WriteAllText(ConfigFilePath, json);
        mqttClientConnector = mqttClientConnector.Where(m => m.MqttClientModel != client).ToList();
        StateHasChanged();
    }

    private void CreateClient()
    {
        string param = null;
        NavManager.NavigateTo($"/createClient");
    }

    private async void ExportJson(){

        var pickedFolder = await FolderPicker.PickFolder();

        if(pickedFolder == null){
            return;
        }
        else{
            string path = pickedFolder;
            string json = JsonConvert.SerializeObject(MqttClientModel.mqttClients);
            File.WriteAllText($@"{path}\client.json", json);

            //var stream = new MemoryStream();
            //var writer = new StreamWriter(stream);
            //writer.Write(json);
            //writer.Flush();
            //stream.Position = 0;
            //using var streamRef = new DotNetStreamReference(stream: stream);

           // await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $@"{pickedFolder}/config.json", streamRef);
        }
       
    }
}
