@page "/Home"
@using MqttMauiApp.Model
@inject NavigationManager NavManager
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Microsoft.AspNetCore.Hosting;
@using Newtonsoft.Json;
@inject MqttMauiApp.Interfaces.IFolderPicker FolderPicker


<style>
    :root {
        --body-bg: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        --msger-bg: #fff;
        --border: 2px solid #ddd;
        --left-msg-bg: #ececec;
        --right-msg-bg: #579ffb;
    }

    html {
        box-sizing: border-box;
    }

    *,
    *:before,
    *:after {
        margin: 0;
        padding: 0;
        box-sizing: inherit;
    }

    .msger {
        display: flex;
        flex-flow: column wrap;
        justify-content: space-between;
        width: 100%;
        height: calc(100% - 5px);
        border: var(--border);
        border-radius: 5px;
        background: var(--msger-bg);
        box-shadow: 0 15px 15px -5px rgba(0, 0, 0, 0.2);
    }

    .msger-header {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: var(--border);
        background: #eee;
        color: #666;
    }

    .msger-chat {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }

        .msger-chat::-webkit-scrollbar {
            width: 6px;
        }

        .msger-chat::-webkit-scrollbar-track {
            background: #ddd;
        }

        .msger-chat::-webkit-scrollbar-thumb {
            background: #bdbdbd;
        }

    .msg {
        display: flex;
        align-items: flex-end;
        margin-bottom: 10px;
    }

        .msg:last-of-type {
            margin: 0;
        }

    .msg-bubble {
        max-width: 450px;
        padding: 15px;
        border-radius: 15px;
        background: var(--left-msg-bg);
    }

    .msg-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .msg-info-name {
        margin-right: 10px;
        font-weight: bold;
    }

    .msg-info-time {
        font-size: 0.85em;
    }

    .left-msg .msg-bubble {
        border-bottom-left-radius: 0;
    }

    .right-msg {
        flex-direction: row-reverse;
        margin: 10 0 0 10px;
    }

        .right-msg .msg-bubble {
            background: var(--right-msg-bg);
            color: #fff;
            border-bottom-right-radius: 0;
            margin: 10 0 0 10px;
        }

        .right-msg .msg-img {
            margin: 10 0 0 10px;
        }

    .msger-inputarea {
        border-top: var(--border);
        background: #eee;
    }

    .msger-input {
        background: #ddd;
    }

    .msger-send-btn {
        margin-left: 10px;
        background: rgb(0, 196, 65);
        color: #fff;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.23s;
    }

        .msger-send-btn:hover {
            background: rgb(0, 180, 50);
        }

    .msger-chat {
        background-color: #fcfcfe;
    }

</style>

<div class="d-flex" style="height:100%;">
    <div class="" style="height:100%;width:320px;background:white;margin-right:10px;border-right: 2px solid green;box-shadow: 10px 0 5px -2px #888;">
        <div class="d-flex flex-fill">
            <h4 class="p-2 w-100 bd-highlight"><b>Connections</b></h4>
            <a class="p-2 flex-shrink-1 bd-highlight btn btn-link text-dark text-center"><span class="fa fa-plus-circle"></span> </a>
        </div>
        <div class="list-group" style="margin-right:10px;justify-content: flex-start;">
            @foreach (var client in mqttClientConnector)
            {
                var host = client.MqttClientModel.ClientName + "@" + client.MqttClientModel.Host;
                <div style="border-radius: 8px;height:40px;cursor: pointer; @DivStyle(client)" @onclick="() => SetSelect(client)">
                    <button title="@host" data-toggle="tooltip" data-placement="top" style="max-width:200px;@DivStyle(client)" class="d-flex justify-content-start text-truncate border-0">
                        @if (client.IsConnected)
                        {
                            <span class="fa fa-circle" style="color:green;margin-left:10px;margin-top:10px"></span>
                        }
                        else
                        {
                            <span class="fa fa-circle" style="color:red;margin-top:10px;margin-left:10px;"></span>
                        }
                        <small style="margin-top:10px;margin-left:10px;max-width:200px;"><b>@host</b></small>
                    </button>
                </div>
            }

        </div>
    </div>
    @if (SelectedClient.MqttClientModel != null)
    {
        <div class="d-flex flex-column" style="width:100%;">
            <div class="row" style="border-bottom: 2px solid grey;">
                <div class="d-flex flex-fill">
                    <h4 class="" style="color:#336600;margin:5px">
                        <b>
                            @SelectedClient.MqttClientModel.ClientName

                        </b>
                        <a class="btn btn-link text-dark text-center"><span class="fa fa-level-down"></span> </a>
                        <a class=" btn btn-link text-dark text-center"><span class="fa fa-power-off"></span> </a>
                        <a class="p-2 btn btn-link text-dark text-center"><span class="fa fa-pencil-square-o"></span> </a>
                    </h4>
                </div>
            </div>
            <div style="height:100%;" class="d-flex">
                <div class="card border-0" style="height:100%;width:250px;background:white;margin-right:10px;border-right: 1px solid green;box-shadow: 10px 0 5px -2px #888;">
                    <div class="card-header text-center border-0" style="background:white;">
                        <button type="button" class="btn btn-outline-success"><span class="fa fa-plus"></span> New Subscription</button>
                    </div>
                    <div class="card-body">
                        @*    <div style="border-radius: 8px;height:40px;cursor: pointer;background:rgb(240,240,240)" class="d-flex">
                    <button style="border-radius: 8px;background:rgb(240,240,240)" class="p-2  text-truncate border-0">
                    testsub

                    </button>

                    <p style="float:right;">Qos 0</p>
                    </div>*@
                        <div class="d-flex bd-highlight" style="border-radius: 8px;height:40px;cursor: pointer;background:rgb(240,240,240)">
                            <div class="p-2 flex-grow-1 bd-highlight">testsub</div>
                            <div class="p-2 bd-highlight">Qos 0</div>
                        </div>
                    </div>
                </div>
                <div class="card border-0" style="padding:0;width:100%;">
                    <section class="msger">
                        <header class="msger-header">
                            <div class="msger-header-title">
                                Plaintext
                            </div>
                            <div class="msger-header-options">
                                @*  <span><i class="fas fa-cog"></i></span>*@
                            </div>
                        </header>

                        <div class="msg right-msg" style="margin-right:10px;margin-top:10px;">

                            <div class="msg-bubble">
                                <div class="msg-info">
                                    <div class="msg-info-name">Topic : Tester</div>
                                    <div class="msg-info-time">@DateTime.Now</div>
                                </div>

                                <div class="msg-text">
                                    Sent Message
                                </div>
                            </div>
                        </div>
                        <main class="msger-chat">
                            <div class="msg left-msg">
                                <div class="msg-bubble">
                                    <div class="msg-info">
                                        <div class="msg-info-name">Topic : Tester</div>
                                        <div class="msg-info-time">@DateTime.Now</div>
                                    </div>

                                    <div class="msg-text">
                                        Sent Message
                                    </div>
                                </div>
                            </div>

                        </main>
                        <div class="msg right-msg" style="margin-right:10px;margin-top:10px;">

                            <div class="msg-bubble">
                                <div class="msg-info">
                                    <div class="msg-info-name">Topic : Tester</div>
                                    <div class="msg-info-time">@DateTime.Now</div>
                                </div>

                                <div class="msg-text">
                                    Sent Message
                                </div>
                            </div>
                        </div>
                        <main class="msger-chat">
                            <div class="msg left-msg">
                                <div class="msg-bubble">
                                    <div class="msg-info">
                                        <div class="msg-info-name">Topic : Tester</div>
                                        <div class="msg-info-time">@DateTime.Now</div>
                                    </div>

                                    <div class="msg-text">
                                        Sent Message
                                    </div>
                                </div>
                            </div>

                        </main>
                        <div class="msg right-msg" style="margin-right:10px;margin-top:10px;">

                            <div class="msg-bubble">
                                <div class="msg-info">
                                    <div class="msg-info-name">Topic : Tester</div>
                                    <div class="msg-info-time">@DateTime.Now</div>
                                </div>

                                <div class="msg-text">
                                    Sent Message
                                </div>
                            </div>
                        </div>
                        <main class="msger-chat">
                            <div class="msg left-msg">
                                <div class="msg-bubble">
                                    <div class="msg-info">
                                        <div class="msg-info-name">Topic : Tester</div>
                                        <div class="msg-info-time">@DateTime.Now</div>
                                    </div>

                                    <div class="msg-text">
                                        Sent Message
                                    </div>
                                </div>
                            </div>

                        </main>

                        <div class="msger-inputarea" style="width:100%">
                            <EditForm Model="SelectedClient.MqttClientModel">
                                <div class="d-flex" style="margin:5px;width:100%">
                                    <div style="margin:5px;">Topic : </div>
                                    <div><input type="text" class="form-control" @bind-value="topicName" required></div>

                                    <div style="margin:5px;">Qos : </div>
                                    <div>

                                        <InputSelect class="form-control" @bind-Value="SelectedClient.MqttClientModel.QosType">

                                            @foreach (var qos in Enum.GetValues(typeof(Qos)))
                                            {
                                                int index = (int)((Qos)Enum.Parse(typeof(Qos), qos.ToString()));
                                                <option value="@qos">@index - @qos Once</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="d-flex" style="margin:5px;width:100%">
                                    <div style="margin:5px;">Message </div>
                                    <div style="margin-right:15px;width:100%;flex-grow: 1; position: relative;">
                                        <InputTextArea class="form-control" style="" @bind-Value="pubMsg" rows="4">

                                        </InputTextArea>
                                        <a class="btn btn-link text-success align-self-baseline" style=" position: absolute;bottom: 0;right: 0;"><span class="fa fa-send"></span> </a>
                                    </div>
                                </div>
                            </EditForm>

                        </div>
                    </section>
                    @* <div style="height:40px;border-bottom: 2px solid grey;">
                </div>
                <div class="card-body overflow-auto border-0 d-flex flex-column" style="max-height: ;;padding:0;overflow-y: auto;background:#1d1e22">
                <div class="card text-light" style="background:blue;float:right;margin-left: auto;margin-right:10px;margin-top:10px;border-radius: 20px 20px 3px 20px;">
                <div class="card-body" style="">
                <div class="card-title">Topic : Tesing <p style="float:right">Qos : 0</p></div>
                <p class="card-text">Hello Published</p>
                <small class="card-text" style="float:right">@DateTime.Now</small>
                </div>
                </div>
                <div class="card w-25" style="background:green;margin:10px;border-radius: 20px 20px 20px 3px;">
                <div class="card-body" style="">
                <div class="card-title">Topic : Tesing <p style="float:right">Qos : 0</p></div>
                <p class="card-text">Hello Published</p>
                <small class="card-text" style="float:right">@DateTime.Now</small>
                </div>
                </div>
                <div class="card w-25 text-light" style="background:blue;float:right;margin-left: auto;margin-right:10px;margin-top:10px;border-radius: 20px 20px 3px 20px;">
                <div class="card-body" style="">
                <div class="card-title">Topic : Tesing <p style="float:right">Qos : 0</p></div>
                <p class="card-text">Hello Published</p>
                <small class="card-text" style="float:right">@DateTime.Now</small>
                </div>
                </div>
                </div>
                <div class="card-footer border-0 text-muted" style="background:white;">
                2 days ago
                <h5 class="card-title">Special title treatment</h5>
                <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                <a href="#" class="btn btn-primary">Go somewhere</a>
                </div>*@
                </div>
            </div>
        </div>
    }
</div>


@code {
    string topicName = "";
    string pubMsg = "";
    List<MqttModelConnection> mqttClientConnector = new List<MqttModelConnection>();
    string ConfigFilePath;
    MqttModelConnection SelectedClient = new MqttModelConnection();

    bool IsSelected(MqttModelConnection client)
        => SelectedClient == client;

    string DivStyle(MqttModelConnection client)
        => IsSelected(client) ? "background:rgb(240,240,240)" : "background:white";

    void SetSelect(MqttModelConnection client)
    {

        SelectedClient = client;
    }
    protected override async Task OnInitializedAsync()
    {
        LoadClients();
        ConnectToMqtt();
        SelectedClient = mqttClientConnector[0];
        StateHasChanged();
    }
    private void LoadClients()
    {
        string mainDir = AppDomain.CurrentDomain.BaseDirectory;
        if (File.Exists($@"{mainDir}\wwwroot\clientconfig.txt"))
        {
            var path = File.ReadAllText($@"{mainDir}\wwwroot\clientconfig.txt");
            if (File.Exists(path))
            {
                ConfigFilePath = path;
                var data = File.ReadAllText(ConfigFilePath);
                MqttClientModel.mqttClients = JsonConvert.DeserializeObject<List<MqttClientModel>>(data);
            }
            else
            {
                ConfigFilePath = $@"{mainDir}\wwwroot\client.json";
                var data = File.ReadAllText(ConfigFilePath);
                MqttClientModel.mqttClients = JsonConvert.DeserializeObject<List<MqttClientModel>>(data);
            }
        }
        else
        {
            ConfigFilePath = $@"{mainDir}\wwwroot\client.json";
            if (File.Exists($@"{mainDir}\wwwroot\client.json"))
            {
                var data = File.ReadAllText($@"{mainDir}\wwwroot\client.json");
                MqttClientModel.mqttClients = JsonConvert.DeserializeObject<List<MqttClientModel>>(data);
                //mqttClientModels = MqttClientModel.mqttClients;
            }
        }
        MqttClientModel.ConfigPath = ConfigFilePath;
    }

    private void ConnectToMqtt()
    {
        mqttClientConnector.Clear();
        if (MqttClientModel.mqttClients.Count > 0)
        {
            foreach (var clientmodel in MqttClientModel.mqttClients)
            {
                var mqttconnector = new MqttConnector(clientmodel);
                var client = mqttconnector.Connect(clientmodel);
                mqttClientConnector.Add(new MqttModelConnection() { MqttConnector = mqttconnector, Client = client, MqttClientModel = clientmodel, IsConnected = false });
                client.ConnectedAsync += async e =>
                {
                    mqttClientConnector.Where(m => m.MqttClientModel == clientmodel).ToList().ForEach(ch => { ch.IsConnected = true; ch.LastConnected = DateTime.Now; });
                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                };
                client.DisconnectedAsync += async e =>
               {
                   mqttClientConnector.Where(m => m.MqttClientModel == clientmodel).ToList().ForEach(ch => { ch.IsConnected = false; });
                   await InvokeAsync(() =>
                   {
                       StateHasChanged();
                   });
               };
                mqttconnector.StartConnecting();
            }
        }
    }
}
